---
import BlockRendererInner from './BlockRenderer.astro' /* we wan't to use this component to render the inner blocks too */
import Navigation from './Navigation.astro';
import NavigationLink from './NavigationLink.astro';
import NavigationSubmenu from './NavigationSubmenu.astro';
import {getBlockStyling} from "@wp-block-tools/styles"
import type {Block} from '@wp-block-tools/styles';
import { Image } from "astro:assets";

type Props = { /* typescript specific syntax, to specify Props type */
 blocks: Block[]
}
const {blocks} = Astro.props;
//console.log("BLOCK FROM BLOCK RENDERER COMPONENT: ", blocks);
---
{blocks.map(block => {
    const {styles, classes} = getBlockStyling(block);
    switch(block.name){
        case "core/navigation-submenu":
            return (
                <NavigationSubmenu
                    classes={classes}
                    styles={styles}
                    label={block.attributes?.label || ""}
                    url={block.attributes?.url || ""}
                    >
                    <BlockRendererInner blocks={ block.innerBlocks || [] }/>
                </NavigationSubmenu>
            );
        case "core/navigation-link":
            return (
                <NavigationLink
                    classes={classes}
                    styles={styles}
                    label={block.attributes?.label || ""}
                    url={block.attributes?.url || ""}
                    />
            );
        case "core/navigation":
            return (<Navigation
                classes={classes} 
                styles={styles}>
                    <BlockRendererInner blocks={ block.innerBlocks || [] }/>
            </Navigation>
            );
        case "core/paragraph":
            return <p class={classes} style={styles} set:html={block.attributes?.content}></p>
        case "core/columns":
        case "core/column":
        case "core/post-content":
        // case "core/template-part":// Not used here | just a wrapper for a group of blocks
        case "core/group":
            return <div class={classes} style={styles}>
                <BlockRendererInner blocks={ block.innerBlocks || [] }/> {/* Can also use the ?? (nullish coalescing operator) */}
            </div>
        case 'core/site-logo':
            return (
                <div class={classes} style={styles}>
                    <Image 
                        height={block.attributes?.width || "50"}
                        width={block.attributes?.width || "50"}
                        src={block.attributes?.url || ""}
                        alt="site log"
                    />
                </div>
            )
        case "core/template-part":
            return <BlockRendererInner blocks={block.innerBlocks || []} />;
        default:
            return null;
    }
})}
{/* Continue from lecture 2.12 - 5:15 */}