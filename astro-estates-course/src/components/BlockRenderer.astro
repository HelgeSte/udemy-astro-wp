---
import BlockRendererInner from './BlockRenderer.astro' /* we wan't to use this component to render the inner blocks too */
import Navigation from './Navigation.astro';
import Cover from './Cover.astro'
import Button from './Button.astro';
import Heading from './Heading.astro';
import NavigationLink from './NavigationLink.astro';
import NavigationSubmenu from './NavigationSubmenu.astro';
import {getBlockStyling} from "@wp-block-tools/styles"
import type {Block} from '@wp-block-tools/styles';
import { Image } from "astro:assets";

type Props = { /* typescript specific syntax, to specify Props type */
 blocks: Block[]
}
const {blocks} = Astro.props;
//console.log("BLOCK FROM BLOCK RENDERER COMPONENT: ", blocks);
---
{blocks.map(block => {
    const {styles, classes} = getBlockStyling(block);
    switch(block.name){
        case 'core/image':
            return <Image 
                src={block.attributes?.url}
                height={block.attributes?.height}
                width={block.attributes?.width}
                class={classes}
                style={styles}
                alt=""
            />
        case "core/button": /* look at case futher down for core/buttons (core/button is in cure/buttons) */
         return <Button classes={classes} style={styles} url={block.attributes?.url} content={block.attributes?.content || "" } />
        case "core/heading":
            return (
            <Heading 
                level={block.attributes?.level || 2} 
                classes={classes} 
                styles={styles} 
                content={block.attributes?.content || "" }
            />
        );
        case 'core/cover': 
            return (
            <Cover 
                classes={classes} 
                styles={styles} 
                url={block.attributes?.url} 
                height={block.attributes?.height}
                width={block.attributes?.width}
                dimRatio={block.attributes?.dimRatio}
                overlayColor={block.attributes?.overlayColor}
                customOverlayColor={block.attributes?.customOverlayColor}
                minHeight={block.attributes?.minHeight}
                minHeightUnit={block.attributes?.minHeightUnit}

            >

                <BlockRendererInner blocks={ block.innerBlocks || [] }/>
                {/*
                <div slot="header">test 1</div>
                <div slot="main-content">Main-content</div>
                <div slot="footer">Footer</div>
                */}
            </Cover>
        );
        case "core/navigation-submenu":
            return (
                <NavigationSubmenu
                    classes={classes}
                    styles={styles}
                    label={block.attributes?.label || ""}
                    url={block.attributes?.url || ""}
                    >
                    <BlockRendererInner blocks={ block.innerBlocks || [] }/>
                </NavigationSubmenu>
            );
        case "core/navigation-link":
            return (
                <NavigationLink
                    classes={classes}
                    styles={styles}
                    label={block.attributes?.label || ""}
                    url={block.attributes?.url || ""}
                    />
            );
        case "core/navigation":
            return (<Navigation
                classes={classes} 
                styles={styles}>
                    <BlockRendererInner blocks={ block.innerBlocks || [] }/>
            </Navigation>
            );
        case "core/paragraph":
            return <p class={classes} style={styles} set:html={block.attributes?.content}></p>
        case "core/columns":
        case "core/column":
        case "core/post-content":
        // case "core/template-part":// Not used here | just a wrapper for a group of blocks
        case "core/group":
            return (
                <div class={classes} style={styles}>
                <BlockRendererInner blocks={ block.innerBlocks || [] }/> {/* Can also use the ?? (nullish coalescing operator) */}
            </div>
            );
        case "core/buttons": /* look at case higher up for core/button */
            return (
                <div class={classes} style={styles}>
                    <BlockRendererInner blocks={block.innerBlocks || [] } />
                </div>
            );
        case 'core/site-logo':
            return (
                <div class={classes} style={styles}>
                    <Image 
                        height={block.attributes?.width || "50"}
                        width={block.attributes?.width || "50"}
                        src={block.attributes?.url || ""}
                        alt="site log"
                    />
                </div>
            )
        case "core/template-part":
            return <BlockRendererInner blocks={block.innerBlocks || []} />;
        default:
            return null;
    }
})}

{/* THE "VIEW ALL PROPERTIES" BUTTON:

Our button from GraphQL query:

Query:
query MyQuery {
  nodeByUri(uri: "/") {
    ... on Page {
      id
      blocks
    }
  }
} 

The button block:
    {
    "name": "core/buttons",
    "innerBlocks": [
    {
        "name": "core/button",
        "attributes": {
        "textAlign": "center",
        "globalStyles": {
            "color": {
            "background": "var(--wp--preset--color--blast-off)",
            "text": "var(--wp--preset--color--starlight)"
            },
            "typography": {
            "fontWeight": "700",
            "textTransform": "uppercase",
            "letterSpacing": "1.3px"
            }
        },
        "content": "View all properties"
        }
    }
*/}