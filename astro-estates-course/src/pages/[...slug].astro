---
import BlockRenderer from '../components/BlockRenderer.astro'
import type {Block} from "@wp-block-tools/styles";
import CommonHead from '../components/CommonHead.astro';

export async function getStaticPaths(){
	const response = await fetch(`${import.meta.env.WPGRAPHQL_URL}`, {
		method: "POST",
		headers: {
			"content-type": "application/json"
		},
		body: JSON.stringify({
			query: `
			query AllPages {
				pages(first:10000){ 
					nodes {
						uri
						blocks
						seo {
							title
							metaDesc
						}
					}
				}
			} 
			`
		})});
	const {data} = await response.json();
	//if it works, the address  http://localhost:4321/contact-us should not give us a 404 error
	return data.pages.nodes.map((page: any) => ( // without any, intellisense think this is an error
		{ // want to return an object
		params: {slug: page.uri == "/" ? undefined : page.uri }
		}
	))
}

//console.log("Using GraphQL URL:", import.meta.env.WPGRAPHQL_URL);

// Using WPGraphQL plugin for fetching data
const response = await fetch(`${import.meta.env.WPGRAPHQL_URL}`, {
	method: "POST",
	headers: {
		"content-type": "application/json"
	},
	body: JSON.stringify({
		query: `
		query PageQuery {
			nodeByUri(uri: "/") {
				... on Page {
					id
					blocks
					seo {
						metaDesc
						title
					}
				}
			}
		}`
	})
});
const {data} = await response.json();
const blocks = data.nodeByUri?.blocks || [] as Block[]; {/* Blocks will awlays be an empty array, so we can default to an empty array */}
const seo = data.nodeByUri?.seo;
---
<!doctype html>
<html lang="en">
	<CommonHead title={seo.title || ""} description={seo.metaDesc || ""} />
	<body>
		<BlockRenderer blocks={blocks} /> {/* pass blocks as props */}
	</body>
</html>

<script>
	/*
Example of fetching Umbraco Content Delivery API in the src/pages/index.astro file:
(Source: https://docs.astro.build/en/guides/cms/umbraco/)
---
const res = await fetch('http://localhost/umbraco/delivery/api/v2/content?filter=contentType:article');
const articles = await res.json();
---
<h1>Astro + Umbraco ðŸš€</h1>
{
  articles.items.map((article) => (
      <h1>{article.name}</h1>
      <p>{article.properties.articleDate}</p>
      <div set:html={article.properties.content?.markup}></div>
  ))
}
	*/
</script>
